<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Compiler; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; class PassConfig { const TYPE_AFTER_REMOVING = 'afterRemoving'; const TYPE_BEFORE_OPTIMIZATION = 'beforeOptimization'; const TYPE_BEFORE_REMOVING = 'beforeRemoving'; const TYPE_OPTIMIZE = 'optimization'; const TYPE_REMOVE = 'removing'; private $mergePass; private $afterRemovingPasses = []; private $beforeOptimizationPasses = []; private $beforeRemovingPasses = []; private $optimizationPasses; private $removingPasses; public function __construct() { $this->mergePass = new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\MergeExtensionConfigurationPass(); $this->beforeOptimizationPasses = [100 => [new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveClassPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveInstanceofConditionalsPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\RegisterEnvVarProcessorsPass()], -1000 => [new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ExtensionCompilerPass()]]; $this->optimizationPasses = [[new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ValidateEnvPlaceholdersPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveChildDefinitionsPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\RegisterServiceSubscribersPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveParameterPlaceHoldersPass(\false, \false), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveFactoryClassPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveNamedArgumentsPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\AutowireRequiredMethodsPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveBindingsPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ServiceLocatorTagPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\DecoratorServicePass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\CheckDefinitionValidityPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\AutowirePass(\false), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveTaggedIteratorArgumentPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveServiceSubscribersPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveReferencesToAliasesPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveInvalidReferencesPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\AnalyzeServiceReferencesPass(\true), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\CheckCircularReferencesPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\CheckReferenceValidityPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\CheckArgumentsValidityPass(\false)]]; $this->beforeRemovingPasses = [-100 => [new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolvePrivatesPass()]]; $this->removingPasses = [[new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\RemovePrivateAliasesPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ReplaceAliasByActualDefinitionPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\RemoveAbstractDefinitionsPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\RemoveUnusedDefinitionsPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\InlineServiceDefinitionsPass(new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\AnalyzeServiceReferencesPass()), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\AnalyzeServiceReferencesPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\DefinitionErrorExceptionPass()]]; $this->afterRemovingPasses = [[new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\CheckExceptionOnInvalidReferenceBehaviorPass(), new \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\ResolveHotPathPass()]]; } public function getPasses() { return \array_merge([$this->mergePass], $this->getBeforeOptimizationPasses(), $this->getOptimizationPasses(), $this->getBeforeRemovingPasses(), $this->getRemovingPasses(), $this->getAfterRemovingPasses()); } public function addPass(\MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface $pass, $type = self::TYPE_BEFORE_OPTIMIZATION, int $priority = 0) { $property = $type . 'Passes'; if (!isset($this->{$property})) { throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException(\sprintf('Invalid type "%s".', $type)); } $passes =& $this->{$property}; if (!isset($passes[$priority])) { $passes[$priority] = []; } $passes[$priority][] = $pass; } public function getAfterRemovingPasses() { return $this->sortPasses($this->afterRemovingPasses); } public function getBeforeOptimizationPasses() { return $this->sortPasses($this->beforeOptimizationPasses); } public function getBeforeRemovingPasses() { return $this->sortPasses($this->beforeRemovingPasses); } public function getOptimizationPasses() { return $this->sortPasses($this->optimizationPasses); } public function getRemovingPasses() { return $this->sortPasses($this->removingPasses); } public function getMergePass() { return $this->mergePass; } public function setMergePass(\MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface $pass) { $this->mergePass = $pass; } public function setAfterRemovingPasses(array $passes) { $this->afterRemovingPasses = [$passes]; } public function setBeforeOptimizationPasses(array $passes) { $this->beforeOptimizationPasses = [$passes]; } public function setBeforeRemovingPasses(array $passes) { $this->beforeRemovingPasses = [$passes]; } public function setOptimizationPasses(array $passes) { $this->optimizationPasses = [$passes]; } public function setRemovingPasses(array $passes) { $this->removingPasses = [$passes]; } private function sortPasses(array $passes) : array { if (0 === \count($passes)) { return []; } \krsort($passes); return \array_merge(...$passes); } } 