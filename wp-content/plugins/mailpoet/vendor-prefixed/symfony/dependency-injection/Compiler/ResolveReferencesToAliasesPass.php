<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Compiler; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException; use MailPoetVendor\Symfony\Component\DependencyInjection\Reference; class ResolveReferencesToAliasesPass extends \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\AbstractRecursivePass { public function process(\MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder $container) { parent::process($container); foreach ($container->getAliases() as $id => $alias) { $aliasId = (string) $alias; $this->currentId = $id; if ($aliasId !== ($defId = $this->getDefinitionId($aliasId, $container))) { $container->setAlias($id, $defId)->setPublic($alias->isPublic())->setPrivate($alias->isPrivate()); } } } protected function processValue($value, $isRoot = \false) { if (!$value instanceof \MailPoetVendor\Symfony\Component\DependencyInjection\Reference) { return parent::processValue($value, $isRoot); } $defId = $this->getDefinitionId($id = (string) $value, $this->container); return $defId !== $id ? new \MailPoetVendor\Symfony\Component\DependencyInjection\Reference($defId, $value->getInvalidBehavior()) : $value; } private function getDefinitionId(string $id, \MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder $container) : string { if (!$container->hasAlias($id)) { return $id; } $alias = $container->getAlias($id); if ($alias->isDeprecated()) { @\trigger_error(\sprintf('%s. It is being referenced by the "%s" %s.', \rtrim($alias->getDeprecationMessage($id), '. '), $this->currentId, $container->hasDefinition($this->currentId) ? 'service' : 'alias'), \E_USER_DEPRECATED); } $seen = []; do { if (isset($seen[$id])) { throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException($id, \array_merge(\array_keys($seen), [$id])); } $seen[$id] = \true; $id = (string) $container->getAlias($id); } while ($container->hasAlias($id)); return $id; } } 