<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Compiler; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder; use MailPoetVendor\Symfony\Component\DependencyInjection\ContainerInterface; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException; use MailPoetVendor\Symfony\Component\DependencyInjection\Reference; class CheckExceptionOnInvalidReferenceBehaviorPass extends \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\AbstractRecursivePass { private $serviceLocatorContextIds = []; public function process(\MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder $container) { $this->serviceLocatorContextIds = []; foreach ($container->findTaggedServiceIds('container.service_locator_context') as $id => $tags) { $this->serviceLocatorContextIds[$id] = $tags[0]['id']; $container->getDefinition($id)->clearTag('container.service_locator_context'); } try { return parent::process($container); } finally { $this->serviceLocatorContextIds = []; } } protected function processValue($value, $isRoot = \false) { if (!$value instanceof \MailPoetVendor\Symfony\Component\DependencyInjection\Reference) { return parent::processValue($value, $isRoot); } if (\MailPoetVendor\Symfony\Component\DependencyInjection\ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE < $value->getInvalidBehavior() || $this->container->has($id = (string) $value)) { return $value; } $currentId = $this->currentId; $graph = $this->container->getCompiler()->getServiceReferenceGraph(); if (isset($this->serviceLocatorContextIds[$currentId])) { $currentId = $this->serviceLocatorContextIds[$currentId]; $locator = $this->container->getDefinition($this->currentId)->getFactory()[0]; foreach ($locator->getArgument(0) as $k => $v) { if ($v->getValues()[0] === $value) { if ($k !== $id) { $currentId = $k . '" in the container provided to "' . $currentId; } throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException($id, $currentId); } } } if ('.' === $currentId[0] && $graph->hasNode($currentId)) { foreach ($graph->getNode($currentId)->getInEdges() as $edge) { if (!$edge->getValue() instanceof \MailPoetVendor\Symfony\Component\DependencyInjection\Reference || \MailPoetVendor\Symfony\Component\DependencyInjection\ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE < $edge->getValue()->getInvalidBehavior()) { continue; } $sourceId = $edge->getSourceNode()->getId(); if ('.' !== $sourceId[0]) { $currentId = $sourceId; break; } } } throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException($id, $currentId); } } 