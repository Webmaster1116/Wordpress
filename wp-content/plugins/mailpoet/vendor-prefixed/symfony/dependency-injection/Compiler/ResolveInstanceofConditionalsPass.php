<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Compiler; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\ChildDefinition; use MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder; use MailPoetVendor\Symfony\Component\DependencyInjection\Definition; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\RuntimeException; class ResolveInstanceofConditionalsPass implements \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface { public function process(\MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder $container) { foreach ($container->getAutoconfiguredInstanceof() as $interface => $definition) { if ($definition->getArguments()) { throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException(\sprintf('Autoconfigured instanceof for type "%s" defines arguments but these are not supported and should be removed.', $interface)); } } foreach ($container->getDefinitions() as $id => $definition) { if ($definition instanceof \MailPoetVendor\Symfony\Component\DependencyInjection\ChildDefinition) { continue; } $container->setDefinition($id, $this->processDefinition($container, $id, $definition)); } } private function processDefinition(\MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder $container, string $id, \MailPoetVendor\Symfony\Component\DependencyInjection\Definition $definition) : \MailPoetVendor\Symfony\Component\DependencyInjection\Definition { $instanceofConditionals = $definition->getInstanceofConditionals(); $autoconfiguredInstanceof = $definition->isAutoconfigured() ? $container->getAutoconfiguredInstanceof() : []; if (!$instanceofConditionals && !$autoconfiguredInstanceof) { return $definition; } if (!($class = $container->getParameterBag()->resolveValue($definition->getClass()))) { return $definition; } $conditionals = $this->mergeConditionals($autoconfiguredInstanceof, $instanceofConditionals, $container); $definition->setInstanceofConditionals([]); $parent = $shared = null; $instanceofTags = []; $instanceofCalls = []; $instanceofBindings = []; $reflectionClass = null; foreach ($conditionals as $interface => $instanceofDefs) { if ($interface !== $class && !(null === $reflectionClass ? $reflectionClass = $container->getReflectionClass($class, \false) ?: \false : $reflectionClass)) { continue; } if ($interface !== $class && !\is_subclass_of($class, $interface)) { continue; } foreach ($instanceofDefs as $key => $instanceofDef) { $instanceofDef = clone $instanceofDef; $instanceofDef->setAbstract(\true)->setParent($parent ?: '.abstract.instanceof.' . $id); $parent = '.instanceof.' . $interface . '.' . $key . '.' . $id; $container->setDefinition($parent, $instanceofDef); $instanceofTags[] = $instanceofDef->getTags(); $instanceofBindings = $instanceofDef->getBindings() + $instanceofBindings; foreach ($instanceofDef->getMethodCalls() as $methodCall) { $instanceofCalls[] = $methodCall; } $instanceofDef->setTags([]); $instanceofDef->setMethodCalls([]); $instanceofDef->setBindings([]); if (isset($instanceofDef->getChanges()['shared'])) { $shared = $instanceofDef->isShared(); } } } if ($parent) { $bindings = $definition->getBindings(); $abstract = $container->setDefinition('.abstract.instanceof.' . $id, $definition); $definition->setBindings([]); $definition = \serialize($definition); $definition = \substr_replace($definition, '53', 2, 2); $definition = \substr_replace($definition, 'Child', 44, 0); $definition = \unserialize($definition); $definition->setParent($parent); if (null !== $shared && !isset($definition->getChanges()['shared'])) { $definition->setShared($shared); } if (null === $definition->getDecoratedService()) { $i = \count($instanceofTags); while (0 <= --$i) { foreach ($instanceofTags[$i] as $k => $v) { foreach ($v as $v) { if ($definition->hasTag($k) && \in_array($v, $definition->getTag($k))) { continue; } $definition->addTag($k, $v); } } } } $definition->setMethodCalls(\array_merge($instanceofCalls, $definition->getMethodCalls())); $definition->setBindings($bindings + $instanceofBindings); $abstract->setBindings([])->setArguments([])->setMethodCalls([])->setDecoratedService(null)->setTags([])->setAbstract(\true); } return $definition; } private function mergeConditionals(array $autoconfiguredInstanceof, array $instanceofConditionals, \MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder $container) : array { $conditionals = \array_map(function ($childDef) { return [$childDef]; }, $autoconfiguredInstanceof); foreach ($instanceofConditionals as $interface => $instanceofDef) { if (!$container->getReflectionClass($interface)) { throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\RuntimeException(\sprintf('"%s" is set as an "instanceof" conditional, but it does not exist.', $interface)); } if (!isset($autoconfiguredInstanceof[$interface])) { $conditionals[$interface] = []; } $conditionals[$interface][] = $instanceofDef; } return $conditionals; } } 