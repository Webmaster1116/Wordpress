<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Compiler; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument; use MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder; use MailPoetVendor\Symfony\Component\DependencyInjection\ContainerInterface; use MailPoetVendor\Symfony\Component\DependencyInjection\Definition; use MailPoetVendor\Symfony\Component\DependencyInjection\Reference; class RegisterReverseContainerPass implements \MailPoetVendor\Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface { private $beforeRemoving; private $serviceId; private $tagName; public function __construct(bool $beforeRemoving, string $serviceId = 'reverse_container', string $tagName = 'container.reversible') { $this->beforeRemoving = $beforeRemoving; $this->serviceId = $serviceId; $this->tagName = $tagName; } public function process(\MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder $container) { if (!$container->hasDefinition($this->serviceId)) { return; } $refType = $this->beforeRemoving ? \MailPoetVendor\Symfony\Component\DependencyInjection\ContainerInterface::IGNORE_ON_UNINITIALIZED_REFERENCE : \MailPoetVendor\Symfony\Component\DependencyInjection\ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE; $services = []; foreach ($container->findTaggedServiceIds($this->tagName) as $id => $tags) { $services[$id] = new \MailPoetVendor\Symfony\Component\DependencyInjection\Reference($id, $refType); } if ($this->beforeRemoving) { $services[$this->serviceId] = new \MailPoetVendor\Symfony\Component\DependencyInjection\Reference($this->serviceId, $refType); } $locator = $container->getDefinition($this->serviceId)->getArgument(1); if ($locator instanceof \MailPoetVendor\Symfony\Component\DependencyInjection\Reference) { $locator = $container->getDefinition((string) $locator); } if ($locator instanceof \MailPoetVendor\Symfony\Component\DependencyInjection\Definition) { foreach ($services as $id => $ref) { $services[$id] = new \MailPoetVendor\Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument($ref); } $locator->replaceArgument(0, $services); } else { $locator->setValues($services); } } } 