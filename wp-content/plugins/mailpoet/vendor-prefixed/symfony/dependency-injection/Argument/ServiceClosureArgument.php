<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Argument; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use MailPoetVendor\Symfony\Component\DependencyInjection\Reference; class ServiceClosureArgument implements \MailPoetVendor\Symfony\Component\DependencyInjection\Argument\ArgumentInterface { private $values; public function __construct(\MailPoetVendor\Symfony\Component\DependencyInjection\Reference $reference) { $this->values = [$reference]; } public function getValues() { return $this->values; } public function setValues(array $values) { if ([0] !== \array_keys($values) || !($values[0] instanceof \MailPoetVendor\Symfony\Component\DependencyInjection\Reference || null === $values[0])) { throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException('A ServiceClosureArgument must hold one and only one Reference.'); } $this->values = $values; } } 