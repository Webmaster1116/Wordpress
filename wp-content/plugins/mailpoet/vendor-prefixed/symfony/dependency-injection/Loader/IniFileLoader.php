<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Loader; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\Config\Util\XmlUtils; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; class IniFileLoader extends \MailPoetVendor\Symfony\Component\DependencyInjection\Loader\FileLoader { public function load($resource, $type = null) { $path = $this->locator->locate($resource); $this->container->fileExists($path); $result = \parse_ini_file($path, \true); if (\false === $result || [] === $result) { throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException(\sprintf('The "%s" file is not valid.', $resource)); } $result = \parse_ini_file($path, \true, \INI_SCANNER_RAW); if (isset($result['parameters']) && \is_array($result['parameters'])) { foreach ($result['parameters'] as $key => $value) { $this->container->setParameter($key, $this->phpize($value)); } } } public function supports($resource, $type = null) { if (!\is_string($resource)) { return \false; } if (null === $type && 'ini' === \pathinfo($resource, \PATHINFO_EXTENSION)) { return \true; } return 'ini' === $type; } private function phpize(string $value) { if ($value !== ($v = \rtrim($value))) { $value = '""' === \substr_replace($v, '', 1, -1) ? \substr($v, 1, -1) : $v; } $lowercaseValue = \strtolower($value); switch (\true) { case \defined($value): return \constant($value); case 'yes' === $lowercaseValue || 'on' === $lowercaseValue: return \true; case 'no' === $lowercaseValue || 'off' === $lowercaseValue || 'none' === $lowercaseValue: return \false; case isset($value[1]) && ("'" === $value[0] && "'" === $value[\strlen($value) - 1] || '"' === $value[0] && '"' === $value[\strlen($value) - 1]): return \substr($value, 1, -1); default: return \MailPoetVendor\Symfony\Component\Config\Util\XmlUtils::phpize($value); } } } 