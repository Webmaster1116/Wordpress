<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Loader; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator; class PhpFileLoader extends \MailPoetVendor\Symfony\Component\DependencyInjection\Loader\FileLoader { protected $autoRegisterAliasesForSinglyImplementedInterfaces = \false; public function load($resource, $type = null) { $container = $this->container; $loader = $this; $path = $this->locator->locate($resource); $this->setCurrentDir(\dirname($path)); $this->container->fileExists($path); $load = \Closure::bind(function ($path) use($container, $loader, $resource, $type) { return include $path; }, $this, \MailPoetVendor\Symfony\Component\DependencyInjection\Loader\ProtectedPhpFileLoader::class); try { $callback = $load($path); if (\is_object($callback) && \is_callable($callback)) { $callback(new \MailPoetVendor\Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator($this->container, $this, $this->instanceof, $path, $resource), $this->container, $this); } } finally { $this->instanceof = []; $this->registerAliasesForSinglyImplementedInterfaces(); } } public function supports($resource, $type = null) { if (!\is_string($resource)) { return \false; } if (null === $type && 'php' === \pathinfo($resource, \PATHINFO_EXTENSION)) { return \true; } return 'php' === $type; } } final class ProtectedPhpFileLoader extends \MailPoetVendor\Symfony\Component\DependencyInjection\Loader\PhpFileLoader { } 