<?php
 namespace MailPoetVendor\Symfony\Component\Validator; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\Common\Annotations\Reader; use MailPoetVendor\Symfony\Component\Translation\TranslatorInterface; use MailPoetVendor\Symfony\Component\Validator\Mapping\Cache\CacheInterface; use MailPoetVendor\Symfony\Component\Validator\Mapping\Factory\MetadataFactoryInterface; use MailPoetVendor\Symfony\Component\Validator\Validator\ValidatorInterface; interface ValidatorBuilderInterface { public function addObjectInitializer(\MailPoetVendor\Symfony\Component\Validator\ObjectInitializerInterface $initializer); public function addObjectInitializers(array $initializers); public function addXmlMapping($path); public function addXmlMappings(array $paths); public function addYamlMapping($path); public function addYamlMappings(array $paths); public function addMethodMapping($methodName); public function addMethodMappings(array $methodNames); public function enableAnnotationMapping(\MailPoetVendor\Doctrine\Common\Annotations\Reader $annotationReader = null); public function disableAnnotationMapping(); public function setMetadataFactory(\MailPoetVendor\Symfony\Component\Validator\Mapping\Factory\MetadataFactoryInterface $metadataFactory); public function setMetadataCache(\MailPoetVendor\Symfony\Component\Validator\Mapping\Cache\CacheInterface $cache); public function setConstraintValidatorFactory(\MailPoetVendor\Symfony\Component\Validator\ConstraintValidatorFactoryInterface $validatorFactory); public function setTranslator(\MailPoetVendor\Symfony\Component\Translation\TranslatorInterface $translator); public function setTranslationDomain($translationDomain); public function getValidator(); } 