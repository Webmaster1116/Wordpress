<?php
 namespace MailPoetVendor\Symfony\Component\Validator\Context; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\Translation\TranslatorInterface as LegacyTranslatorInterface; use MailPoetVendor\Symfony\Component\Validator\Validator\ValidatorInterface; use MailPoetVendor\Symfony\Contracts\Translation\TranslatorInterface; class ExecutionContextFactory implements \MailPoetVendor\Symfony\Component\Validator\Context\ExecutionContextFactoryInterface { private $translator; private $translationDomain; public function __construct($translator, string $translationDomain = null) { if (!$translator instanceof \MailPoetVendor\Symfony\Component\Translation\TranslatorInterface && !$translator instanceof \MailPoetVendor\Symfony\Contracts\Translation\TranslatorInterface) { throw new \TypeError(\sprintf('Argument 1 passed to "%s()" must be an instance of "%s", "%s" given.', __METHOD__, \MailPoetVendor\Symfony\Contracts\Translation\TranslatorInterface::class, \is_object($translator) ? \get_class($translator) : \gettype($translator))); } $this->translator = $translator; $this->translationDomain = $translationDomain; } public function createContext(\MailPoetVendor\Symfony\Component\Validator\Validator\ValidatorInterface $validator, $root) { return new \MailPoetVendor\Symfony\Component\Validator\Context\ExecutionContext($validator, $root, $this->translator, $this->translationDomain); } } 