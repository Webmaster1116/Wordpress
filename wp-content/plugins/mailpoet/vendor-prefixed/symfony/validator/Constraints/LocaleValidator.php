<?php
 namespace MailPoetVendor\Symfony\Component\Validator\Constraints; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\Intl\Locales; use MailPoetVendor\Symfony\Component\Validator\Constraint; use MailPoetVendor\Symfony\Component\Validator\ConstraintValidator; use MailPoetVendor\Symfony\Component\Validator\Exception\LogicException; use MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedTypeException; use MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedValueException; class LocaleValidator extends \MailPoetVendor\Symfony\Component\Validator\ConstraintValidator { public function validate($value, \MailPoetVendor\Symfony\Component\Validator\Constraint $constraint) { if (!$constraint instanceof \MailPoetVendor\Symfony\Component\Validator\Constraints\Locale) { throw new \MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedTypeException($constraint, \MailPoetVendor\Symfony\Component\Validator\Constraints\Locale::class); } if (null === $value || '' === $value) { return; } if (!\is_scalar($value) && !(\is_object($value) && \method_exists($value, '__toString'))) { throw new \MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedValueException($value, 'string'); } if (!\class_exists(\MailPoetVendor\Symfony\Component\Intl\Locales::class)) { throw new \MailPoetVendor\Symfony\Component\Validator\Exception\LogicException('The Intl component is required to use the Locale constraint. Try running "composer require symfony/intl".'); } $inputValue = (string) $value; $value = $inputValue; if ($constraint->canonicalize) { $value = \Locale::canonicalize($value); } if (!\MailPoetVendor\Symfony\Component\Intl\Locales::exists($value)) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($inputValue))->setCode(\MailPoetVendor\Symfony\Component\Validator\Constraints\Locale::NO_SUCH_LOCALE_ERROR)->addViolation(); } } } 