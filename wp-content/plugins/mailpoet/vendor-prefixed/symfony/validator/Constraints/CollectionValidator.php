<?php
 namespace MailPoetVendor\Symfony\Component\Validator\Constraints; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\Validator\Constraint; use MailPoetVendor\Symfony\Component\Validator\ConstraintValidator; use MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedTypeException; use MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedValueException; class CollectionValidator extends \MailPoetVendor\Symfony\Component\Validator\ConstraintValidator { public function validate($value, \MailPoetVendor\Symfony\Component\Validator\Constraint $constraint) { if (!$constraint instanceof \MailPoetVendor\Symfony\Component\Validator\Constraints\Collection) { throw new \MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedTypeException($constraint, \MailPoetVendor\Symfony\Component\Validator\Constraints\Collection::class); } if (null === $value) { return; } if (!\is_array($value) && !($value instanceof \Traversable && $value instanceof \ArrayAccess)) { throw new \MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedValueException($value, 'array|(Traversable&ArrayAccess)'); } $context = $this->context; foreach ($constraint->fields as $field => $fieldConstraint) { $existsInArray = \is_array($value) && \array_key_exists($field, $value); $existsInArrayAccess = $value instanceof \ArrayAccess && $value->offsetExists($field); if ($existsInArray || $existsInArrayAccess) { if (\count($fieldConstraint->constraints) > 0) { $context->getValidator()->inContext($context)->atPath('[' . $field . ']')->validate($value[$field], $fieldConstraint->constraints); } } elseif (!$fieldConstraint instanceof \MailPoetVendor\Symfony\Component\Validator\Constraints\Optional && !$constraint->allowMissingFields) { $context->buildViolation($constraint->missingFieldsMessage)->atPath('[' . $field . ']')->setParameter('{{ field }}', $this->formatValue($field))->setInvalidValue(null)->setCode(\MailPoetVendor\Symfony\Component\Validator\Constraints\Collection::MISSING_FIELD_ERROR)->addViolation(); } } if (!$constraint->allowExtraFields) { foreach ($value as $field => $fieldValue) { if (!isset($constraint->fields[$field])) { $context->buildViolation($constraint->extraFieldsMessage)->atPath('[' . $field . ']')->setParameter('{{ field }}', $this->formatValue($field))->setInvalidValue($fieldValue)->setCode(\MailPoetVendor\Symfony\Component\Validator\Constraints\Collection::NO_SUCH_FIELD_ERROR)->addViolation(); } } } } } 