<?php
 namespace MailPoetVendor\Doctrine\Common\Collections; if (!defined('ABSPATH')) exit; use ArrayIterator; use Closure; use MailPoetVendor\Doctrine\Common\Collections\Expr\ClosureExpressionVisitor; class ArrayCollection implements \MailPoetVendor\Doctrine\Common\Collections\Collection, \MailPoetVendor\Doctrine\Common\Collections\Selectable { private $elements; public function __construct(array $elements = []) { $this->elements = $elements; } protected function createFrom(array $elements) { return new static($elements); } public function toArray() { return $this->elements; } public function first() { return \reset($this->elements); } public function last() { return \end($this->elements); } public function key() { return \key($this->elements); } public function next() { return \next($this->elements); } public function current() { return \current($this->elements); } public function remove($key) { if (!isset($this->elements[$key]) && !\array_key_exists($key, $this->elements)) { return null; } $removed = $this->elements[$key]; unset($this->elements[$key]); return $removed; } public function removeElement($element) { $key = \array_search($element, $this->elements, \true); if ($key === \false) { return \false; } unset($this->elements[$key]); return \true; } public function offsetExists($offset) { return $this->containsKey($offset); } public function offsetGet($offset) { return $this->get($offset); } public function offsetSet($offset, $value) { if (!isset($offset)) { $this->add($value); return; } $this->set($offset, $value); } public function offsetUnset($offset) { $this->remove($offset); } public function containsKey($key) { return isset($this->elements[$key]) || \array_key_exists($key, $this->elements); } public function contains($element) { return \in_array($element, $this->elements, \true); } public function exists(\Closure $p) { foreach ($this->elements as $key => $element) { if ($p($key, $element)) { return \true; } } return \false; } public function indexOf($element) { return \array_search($element, $this->elements, \true); } public function get($key) { return $this->elements[$key] ?? null; } public function getKeys() { return \array_keys($this->elements); } public function getValues() { return \array_values($this->elements); } public function count() { return \count($this->elements); } public function set($key, $value) { $this->elements[$key] = $value; } public function add($element) { $this->elements[] = $element; return \true; } public function isEmpty() { return empty($this->elements); } public function getIterator() { return new \ArrayIterator($this->elements); } public function map(\Closure $func) { return $this->createFrom(\array_map($func, $this->elements)); } public function filter(\Closure $p) { return $this->createFrom(\array_filter($this->elements, $p)); } public function forAll(\Closure $p) { foreach ($this->elements as $key => $element) { if (!$p($key, $element)) { return \false; } } return \true; } public function partition(\Closure $p) { $matches = $noMatches = []; foreach ($this->elements as $key => $element) { if ($p($key, $element)) { $matches[$key] = $element; } else { $noMatches[$key] = $element; } } return [$this->createFrom($matches), $this->createFrom($noMatches)]; } public function __toString() { return __CLASS__ . '@' . \spl_object_hash($this); } public function clear() { $this->elements = []; } public function slice($offset, $length = null) { return \array_slice($this->elements, $offset, $length, \true); } public function matching(\MailPoetVendor\Doctrine\Common\Collections\Criteria $criteria) { $expr = $criteria->getWhereExpression(); $filtered = $this->elements; if ($expr) { $visitor = new \MailPoetVendor\Doctrine\Common\Collections\Expr\ClosureExpressionVisitor(); $filter = $visitor->dispatch($expr); $filtered = \array_filter($filtered, $filter); } if ($orderings = $criteria->getOrderings()) { $next = null; foreach (\array_reverse($orderings) as $field => $ordering) { $next = \MailPoetVendor\Doctrine\Common\Collections\Expr\ClosureExpressionVisitor::sortByField($field, $ordering == \MailPoetVendor\Doctrine\Common\Collections\Criteria::DESC ? -1 : 1, $next); } \uasort($filtered, $next); } $offset = $criteria->getFirstResult(); $length = $criteria->getMaxResults(); if ($offset || $length) { $filtered = \array_slice($filtered, (int) $offset, $length); } return $this->createFrom($filtered); } } 