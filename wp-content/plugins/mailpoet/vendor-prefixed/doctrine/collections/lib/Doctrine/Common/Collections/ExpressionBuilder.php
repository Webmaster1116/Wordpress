<?php
 namespace MailPoetVendor\Doctrine\Common\Collections; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison; use MailPoetVendor\Doctrine\Common\Collections\Expr\CompositeExpression; use MailPoetVendor\Doctrine\Common\Collections\Expr\Value; class ExpressionBuilder { public function andX($x = null) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\CompositeExpression(\MailPoetVendor\Doctrine\Common\Collections\Expr\CompositeExpression::TYPE_AND, \func_get_args()); } public function orX($x = null) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\CompositeExpression(\MailPoetVendor\Doctrine\Common\Collections\Expr\CompositeExpression::TYPE_OR, \func_get_args()); } public function eq($field, $value) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::EQ, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($value)); } public function gt($field, $value) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::GT, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($value)); } public function lt($field, $value) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::LT, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($value)); } public function gte($field, $value) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::GTE, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($value)); } public function lte($field, $value) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::LTE, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($value)); } public function neq($field, $value) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::NEQ, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($value)); } public function isNull($field) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::EQ, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value(null)); } public function in($field, array $values) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::IN, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($values)); } public function notIn($field, array $values) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::NIN, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($values)); } public function contains($field, $value) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::CONTAINS, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($value)); } public function memberOf($field, $value) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::MEMBER_OF, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($value)); } public function startsWith($field, $value) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::STARTS_WITH, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($value)); } public function endsWith($field, $value) { return new \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison($field, \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::ENDS_WITH, new \MailPoetVendor\Doctrine\Common\Collections\Expr\Value($value)); } } 