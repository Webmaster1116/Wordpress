<?php
 namespace MailPoetVendor\Doctrine\Common\Proxy; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\Common\Proxy\Exception\InvalidArgumentException; class Autoloader { public static function resolveFile($proxyDir, $proxyNamespace, $className) { if (0 !== \strpos($className, $proxyNamespace)) { throw \MailPoetVendor\Doctrine\Common\Proxy\Exception\InvalidArgumentException::notProxyClass($className, $proxyNamespace); } $classNameRelativeToProxyNamespace = \substr($className, \strlen($proxyNamespace)); $fileName = \str_replace('\\', '', $classNameRelativeToProxyNamespace); return $proxyDir . \DIRECTORY_SEPARATOR . $fileName . '.php'; } public static function register($proxyDir, $proxyNamespace, $notFoundCallback = null) { $proxyNamespace = \ltrim($proxyNamespace, '\\'); if (!(null === $notFoundCallback || \is_callable($notFoundCallback))) { throw \MailPoetVendor\Doctrine\Common\Proxy\Exception\InvalidArgumentException::invalidClassNotFoundCallback($notFoundCallback); } $autoloader = function ($className) use($proxyDir, $proxyNamespace, $notFoundCallback) { if (0 === \strpos($className, $proxyNamespace)) { $file = \MailPoetVendor\Doctrine\Common\Proxy\Autoloader::resolveFile($proxyDir, $proxyNamespace, $className); if ($notFoundCallback && !\file_exists($file)) { \call_user_func($notFoundCallback, $proxyDir, $proxyNamespace, $className); } require $file; } }; \spl_autoload_register($autoloader); return $autoloader; } } 