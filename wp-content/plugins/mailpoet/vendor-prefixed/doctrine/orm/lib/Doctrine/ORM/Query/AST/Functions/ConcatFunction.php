<?php
 namespace MailPoetVendor\Doctrine\ORM\Query\AST\Functions; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\Query\Lexer; class ConcatFunction extends \MailPoetVendor\Doctrine\ORM\Query\AST\Functions\FunctionNode { public $firstStringPrimary; public $secondStringPrimary; public $concatExpressions = []; public function getSql(\MailPoetVendor\Doctrine\ORM\Query\SqlWalker $sqlWalker) { $platform = $sqlWalker->getConnection()->getDatabasePlatform(); $args = []; foreach ($this->concatExpressions as $expression) { $args[] = $sqlWalker->walkStringPrimary($expression); } return \call_user_func_array([$platform, 'getConcatExpression'], $args); } public function parse(\MailPoetVendor\Doctrine\ORM\Query\Parser $parser) { $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_IDENTIFIER); $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_OPEN_PARENTHESIS); $this->firstStringPrimary = $parser->StringPrimary(); $this->concatExpressions[] = $this->firstStringPrimary; $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_COMMA); $this->secondStringPrimary = $parser->StringPrimary(); $this->concatExpressions[] = $this->secondStringPrimary; while ($parser->getLexer()->isNextToken(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_COMMA)) { $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_COMMA); $this->concatExpressions[] = $parser->StringPrimary(); } $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_CLOSE_PARENTHESIS); } } 