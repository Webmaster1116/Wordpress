<?php
 namespace MailPoetVendor\Doctrine\ORM\Tools\Pagination; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\Query\TreeWalkerAdapter; use MailPoetVendor\Doctrine\ORM\Query\AST\SelectStatement; use MailPoetVendor\Doctrine\ORM\Query\AST\SelectExpression; use MailPoetVendor\Doctrine\ORM\Query\AST\PathExpression; use MailPoetVendor\Doctrine\ORM\Query\AST\AggregateExpression; class CountWalker extends \MailPoetVendor\Doctrine\ORM\Query\TreeWalkerAdapter { const HINT_DISTINCT = 'doctrine_paginator.distinct'; public function walkSelectStatement(\MailPoetVendor\Doctrine\ORM\Query\AST\SelectStatement $AST) { if ($AST->havingClause) { throw new \RuntimeException('Cannot count query that uses a HAVING clause. Use the output walkers for pagination'); } $queryComponents = $this->_getQueryComponents(); $from = $AST->fromClause->identificationVariableDeclarations; if (\count($from) > 1) { throw new \RuntimeException("Cannot count query which selects two FROM components, cannot make distinction"); } $fromRoot = \reset($from); $rootAlias = $fromRoot->rangeVariableDeclaration->aliasIdentificationVariable; $rootClass = $queryComponents[$rootAlias]['metadata']; $identifierFieldName = $rootClass->getSingleIdentifierFieldName(); $pathType = \MailPoetVendor\Doctrine\ORM\Query\AST\PathExpression::TYPE_STATE_FIELD; if (isset($rootClass->associationMappings[$identifierFieldName])) { $pathType = \MailPoetVendor\Doctrine\ORM\Query\AST\PathExpression::TYPE_SINGLE_VALUED_ASSOCIATION; } $pathExpression = new \MailPoetVendor\Doctrine\ORM\Query\AST\PathExpression(\MailPoetVendor\Doctrine\ORM\Query\AST\PathExpression::TYPE_STATE_FIELD | \MailPoetVendor\Doctrine\ORM\Query\AST\PathExpression::TYPE_SINGLE_VALUED_ASSOCIATION, $rootAlias, $identifierFieldName); $pathExpression->type = $pathType; $distinct = $this->_getQuery()->getHint(self::HINT_DISTINCT); $AST->selectClause->selectExpressions = [new \MailPoetVendor\Doctrine\ORM\Query\AST\SelectExpression(new \MailPoetVendor\Doctrine\ORM\Query\AST\AggregateExpression('count', $pathExpression, $distinct), null)]; $AST->orderByClause = null; } } 