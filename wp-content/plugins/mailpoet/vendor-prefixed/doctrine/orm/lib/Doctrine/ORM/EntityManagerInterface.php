<?php
 namespace MailPoetVendor\Doctrine\ORM; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\Query\ResultSetMapping; use MailPoetVendor\Doctrine\Persistence\ObjectManager; interface EntityManagerInterface extends \MailPoetVendor\Doctrine\Persistence\ObjectManager { public function getCache(); public function getConnection(); public function getExpressionBuilder(); public function beginTransaction(); public function transactional($func); public function commit(); public function rollback(); public function createQuery($dql = ''); public function createNamedQuery($name); public function createNativeQuery($sql, \MailPoetVendor\Doctrine\ORM\Query\ResultSetMapping $rsm); public function createNamedNativeQuery($name); public function createQueryBuilder(); public function getReference($entityName, $id); public function getPartialReference($entityName, $identifier); public function close(); public function copy($entity, $deep = \false); public function lock($entity, $lockMode, $lockVersion = null); public function getEventManager(); public function getConfiguration(); public function isOpen(); public function getUnitOfWork(); public function getHydrator($hydrationMode); public function newHydrator($hydrationMode); public function getProxyFactory(); public function getFilters(); public function isFiltersStateClean(); public function hasFilters(); } 