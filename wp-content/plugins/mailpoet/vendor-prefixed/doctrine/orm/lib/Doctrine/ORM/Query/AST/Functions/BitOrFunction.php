<?php
 namespace MailPoetVendor\Doctrine\ORM\Query\AST\Functions; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\Query\Lexer; class BitOrFunction extends \MailPoetVendor\Doctrine\ORM\Query\AST\Functions\FunctionNode { public $firstArithmetic; public $secondArithmetic; public function getSql(\MailPoetVendor\Doctrine\ORM\Query\SqlWalker $sqlWalker) { $platform = $sqlWalker->getConnection()->getDatabasePlatform(); return $platform->getBitOrComparisonExpression($this->firstArithmetic->dispatch($sqlWalker), $this->secondArithmetic->dispatch($sqlWalker)); } public function parse(\MailPoetVendor\Doctrine\ORM\Query\Parser $parser) { $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_IDENTIFIER); $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_OPEN_PARENTHESIS); $this->firstArithmetic = $parser->ArithmeticPrimary(); $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_COMMA); $this->secondArithmetic = $parser->ArithmeticPrimary(); $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_CLOSE_PARENTHESIS); } } 