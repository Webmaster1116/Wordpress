<?php
 namespace MailPoetVendor\Doctrine\ORM\Internal\Hydration; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\NoResultException; use MailPoetVendor\Doctrine\ORM\NonUniqueResultException; class SingleScalarHydrator extends \MailPoetVendor\Doctrine\ORM\Internal\Hydration\AbstractHydrator { protected function hydrateAllData() { $data = $this->_stmt->fetchAll(\PDO::FETCH_ASSOC); $numRows = \count($data); if ($numRows === 0) { throw new \MailPoetVendor\Doctrine\ORM\NoResultException(); } if ($numRows > 1) { throw new \MailPoetVendor\Doctrine\ORM\NonUniqueResultException('The query returned multiple rows. Change the query or use a different result function like getScalarResult().'); } if (\count($data[\key($data)]) > 1) { throw new \MailPoetVendor\Doctrine\ORM\NonUniqueResultException('The query returned a row containing multiple columns. Change the query or use a different result function like getScalarResult().'); } $result = $this->gatherScalarRowData($data[\key($data)]); return \array_shift($result); } } 