<?php
 namespace MailPoetVendor\Doctrine\ORM\Mapping\Reflection; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\Persistence\Mapping\ReflectionService; use ReflectionClass; use ReflectionProperty; final class ReflectionPropertiesGetter { private $properties = []; private $reflectionService; public function __construct(\MailPoetVendor\Doctrine\Persistence\Mapping\ReflectionService $reflectionService) { $this->reflectionService = $reflectionService; } public function getProperties($className) { if (isset($this->properties[$className])) { return $this->properties[$className]; } return $this->properties[$className] = \call_user_func_array( 'array_merge', \array_merge([[]], \array_map([$this, 'getClassProperties'], $this->getHierarchyClasses($className))) ); } private function getHierarchyClasses($className) : array { $classes = []; $parentClassName = $className; while ($parentClassName && ($currentClass = $this->reflectionService->getClass($parentClassName))) { $classes[] = $currentClass; $parentClassName = null; if ($parentClass = $currentClass->getParentClass()) { $parentClassName = $parentClass->getName(); } } return $classes; } private function getClassProperties(\ReflectionClass $reflectionClass) : array { $properties = $reflectionClass->getProperties(); return \array_filter(\array_filter(\array_map([$this, 'getAccessibleProperty'], \array_combine(\array_map([$this, 'getLogicalName'], $properties), $properties))), [$this, 'isInstanceProperty']); } private function isInstanceProperty(\ReflectionProperty $reflectionProperty) { return !$reflectionProperty->isStatic(); } private function getAccessibleProperty(\ReflectionProperty $property) { return $this->reflectionService->getAccessibleProperty($property->getDeclaringClass()->getName(), $property->getName()); } private function getLogicalName(\ReflectionProperty $property) { $propertyName = $property->getName(); if ($property->isPublic()) { return $propertyName; } if ($property->isProtected()) { return "\0*\0" . $propertyName; } return "\0" . $property->getDeclaringClass()->getName() . "\0" . $propertyName; } } 