<?php
 namespace MailPoetVendor\Doctrine\ORM\Persisters\Collection; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\EntityManagerInterface; use MailPoetVendor\Doctrine\ORM\UnitOfWork; abstract class AbstractCollectionPersister implements \MailPoetVendor\Doctrine\ORM\Persisters\Collection\CollectionPersister { protected $em; protected $conn; protected $uow; protected $platform; protected $quoteStrategy; public function __construct(\MailPoetVendor\Doctrine\ORM\EntityManagerInterface $em) { $this->em = $em; $this->uow = $em->getUnitOfWork(); $this->conn = $em->getConnection(); $this->platform = $this->conn->getDatabasePlatform(); $this->quoteStrategy = $em->getConfiguration()->getQuoteStrategy(); } protected function isValidEntityState($entity) { $entityState = $this->uow->getEntityState($entity, \MailPoetVendor\Doctrine\ORM\UnitOfWork::STATE_NEW); if ($entityState === \MailPoetVendor\Doctrine\ORM\UnitOfWork::STATE_NEW) { return \false; } return !($entityState === \MailPoetVendor\Doctrine\ORM\UnitOfWork::STATE_MANAGED && $this->uow->isScheduledForInsert($entity)); } } 