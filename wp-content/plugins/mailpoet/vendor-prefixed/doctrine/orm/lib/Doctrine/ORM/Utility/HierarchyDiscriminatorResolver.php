<?php
 namespace MailPoetVendor\Doctrine\ORM\Utility; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\Persistence\Mapping\ClassMetadata; use MailPoetVendor\Doctrine\ORM\EntityManagerInterface; use function interface_exists; final class HierarchyDiscriminatorResolver { private function __construct() { } public static function resolveDiscriminatorsForClass(\MailPoetVendor\Doctrine\Persistence\Mapping\ClassMetadata $rootClassMetadata, \MailPoetVendor\Doctrine\ORM\EntityManagerInterface $entityManager) : array { $hierarchyClasses = $rootClassMetadata->subClasses; $hierarchyClasses[] = $rootClassMetadata->name; $discriminators = []; foreach ($hierarchyClasses as $class) { $currentMetadata = $entityManager->getClassMetadata($class); $currentDiscriminator = $currentMetadata->discriminatorValue; if (null !== $currentDiscriminator) { $discriminators[$currentDiscriminator] = null; } } return $discriminators; } } \interface_exists(\MailPoetVendor\Doctrine\Persistence\Mapping\ClassMetadata::class); 