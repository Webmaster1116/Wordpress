<?php
 namespace MailPoetVendor\Doctrine\ORM\Cache\Persister\Collection; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\PersistentCollection; use MailPoetVendor\Doctrine\ORM\Cache\CacheException; use MailPoetVendor\Doctrine\Common\Util\ClassUtils; class ReadOnlyCachedCollectionPersister extends \MailPoetVendor\Doctrine\ORM\Cache\Persister\Collection\NonStrictReadWriteCachedCollectionPersister { public function update(\MailPoetVendor\Doctrine\ORM\PersistentCollection $collection) { if ($collection->isDirty() && $collection->getSnapshot()) { throw \MailPoetVendor\Doctrine\ORM\Cache\CacheException::updateReadOnlyCollection(\MailPoetVendor\Doctrine\Common\Util\ClassUtils::getClass($collection->getOwner()), $this->association['fieldName']); } parent::update($collection); } } 