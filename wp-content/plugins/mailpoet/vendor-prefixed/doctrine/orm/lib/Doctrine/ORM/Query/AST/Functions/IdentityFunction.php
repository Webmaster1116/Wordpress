<?php
 namespace MailPoetVendor\Doctrine\ORM\Query\AST\Functions; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\Query\Lexer; use MailPoetVendor\Doctrine\ORM\Query\Parser; use MailPoetVendor\Doctrine\ORM\Query\SqlWalker; use MailPoetVendor\Doctrine\ORM\Query\QueryException; class IdentityFunction extends \MailPoetVendor\Doctrine\ORM\Query\AST\Functions\FunctionNode { public $pathExpression; public $fieldMapping; public function getSql(\MailPoetVendor\Doctrine\ORM\Query\SqlWalker $sqlWalker) { $platform = $sqlWalker->getEntityManager()->getConnection()->getDatabasePlatform(); $quoteStrategy = $sqlWalker->getEntityManager()->getConfiguration()->getQuoteStrategy(); $dqlAlias = $this->pathExpression->identificationVariable; $assocField = $this->pathExpression->field; $qComp = $sqlWalker->getQueryComponent($dqlAlias); $class = $qComp['metadata']; $assoc = $class->associationMappings[$assocField]; $targetEntity = $sqlWalker->getEntityManager()->getClassMetadata($assoc['targetEntity']); $joinColumn = \reset($assoc['joinColumns']); if ($this->fieldMapping !== null) { if (!isset($targetEntity->fieldMappings[$this->fieldMapping])) { throw new \MailPoetVendor\Doctrine\ORM\Query\QueryException(\sprintf('Undefined reference field mapping "%s"', $this->fieldMapping)); } $field = $targetEntity->fieldMappings[$this->fieldMapping]; $joinColumn = null; foreach ($assoc['joinColumns'] as $mapping) { if ($mapping['referencedColumnName'] === $field['columnName']) { $joinColumn = $mapping; break; } } if ($joinColumn === null) { throw new \MailPoetVendor\Doctrine\ORM\Query\QueryException(\sprintf('Unable to resolve the reference field mapping "%s"', $this->fieldMapping)); } } $tableName = $sqlWalker->getEntityManager()->getClassMetadata($assoc['sourceEntity'])->getTableName(); $tableAlias = $sqlWalker->getSQLTableAlias($tableName, $dqlAlias); $columnName = $quoteStrategy->getJoinColumnName($joinColumn, $targetEntity, $platform); return $tableAlias . '.' . $columnName; } public function parse(\MailPoetVendor\Doctrine\ORM\Query\Parser $parser) { $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_IDENTIFIER); $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_OPEN_PARENTHESIS); $this->pathExpression = $parser->SingleValuedAssociationPathExpression(); if ($parser->getLexer()->isNextToken(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_COMMA)) { $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_COMMA); $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_STRING); $this->fieldMapping = $parser->getLexer()->token['value']; } $parser->match(\MailPoetVendor\Doctrine\ORM\Query\Lexer::T_CLOSE_PARENTHESIS); } } 