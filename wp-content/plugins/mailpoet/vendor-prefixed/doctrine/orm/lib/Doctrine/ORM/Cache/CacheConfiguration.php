<?php
 namespace MailPoetVendor\Doctrine\ORM\Cache; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\Cache\Logging\CacheLogger; class CacheConfiguration { private $cacheFactory; private $regionsConfig; private $cacheLogger; private $queryValidator; public function getCacheFactory() { return $this->cacheFactory; } public function setCacheFactory(\MailPoetVendor\Doctrine\ORM\Cache\CacheFactory $factory) { $this->cacheFactory = $factory; } public function getCacheLogger() { return $this->cacheLogger; } public function setCacheLogger(\MailPoetVendor\Doctrine\ORM\Cache\Logging\CacheLogger $logger) { $this->cacheLogger = $logger; } public function getRegionsConfiguration() { if ($this->regionsConfig === null) { $this->regionsConfig = new \MailPoetVendor\Doctrine\ORM\Cache\RegionsConfiguration(); } return $this->regionsConfig; } public function setRegionsConfiguration(\MailPoetVendor\Doctrine\ORM\Cache\RegionsConfiguration $regionsConfig) { $this->regionsConfig = $regionsConfig; } public function getQueryValidator() { if ($this->queryValidator === null) { $this->queryValidator = new \MailPoetVendor\Doctrine\ORM\Cache\TimestampQueryCacheValidator($this->cacheFactory->getTimestampRegion()); } return $this->queryValidator; } public function setQueryValidator(\MailPoetVendor\Doctrine\ORM\Cache\QueryCacheValidator $validator) { $this->queryValidator = $validator; } } 