<?php
 namespace MailPoetVendor\Doctrine\ORM\Query; if (!defined('ABSPATH')) exit; class Expr { public function andX($x = null) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Andx(\func_get_args()); } public function orX($x = null) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Orx(\func_get_args()); } public function asc($expr) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\OrderBy($expr, 'ASC'); } public function desc($expr) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\OrderBy($expr, 'DESC'); } public function eq($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison($x, \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison::EQ, $y); } public function neq($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison($x, \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison::NEQ, $y); } public function lt($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison($x, \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison::LT, $y); } public function lte($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison($x, \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison::LTE, $y); } public function gt($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison($x, \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison::GT, $y); } public function gte($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison($x, \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison::GTE, $y); } public function avg($x) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('AVG', [$x]); } public function max($x) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('MAX', [$x]); } public function min($x) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('MIN', [$x]); } public function count($x) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('COUNT', [$x]); } public function countDistinct($x) { return 'COUNT(DISTINCT ' . \implode(', ', \func_get_args()) . ')'; } public function exists($subquery) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('EXISTS', [$subquery]); } public function all($subquery) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('ALL', [$subquery]); } public function some($subquery) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('SOME', [$subquery]); } public function any($subquery) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('ANY', [$subquery]); } public function not($restriction) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('NOT', [$restriction]); } public function abs($x) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('ABS', [$x]); } public function prod($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Math($x, '*', $y); } public function diff($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Math($x, '-', $y); } public function sum($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Math($x, '+', $y); } public function quot($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Math($x, '/', $y); } public function sqrt($x) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('SQRT', [$x]); } public function in($x, $y) { if (\is_array($y)) { foreach ($y as &$literal) { if (!$literal instanceof \MailPoetVendor\Doctrine\ORM\Query\Expr\Literal) { $literal = $this->_quoteLiteral($literal); } } } return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func($x . ' IN', (array) $y); } public function notIn($x, $y) { if (\is_array($y)) { foreach ($y as &$literal) { if (!$literal instanceof \MailPoetVendor\Doctrine\ORM\Query\Expr\Literal) { $literal = $this->_quoteLiteral($literal); } } } return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func($x . ' NOT IN', (array) $y); } public function isNull($x) { return $x . ' IS NULL'; } public function isNotNull($x) { return $x . ' IS NOT NULL'; } public function like($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison($x, 'LIKE', $y); } public function notLike($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison($x, 'NOT LIKE', $y); } public function concat($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('CONCAT', \func_get_args()); } public function substring($x, $from, $len = null) { $args = [$x, $from]; if (null !== $len) { $args[] = $len; } return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('SUBSTRING', $args); } public function lower($x) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('LOWER', [$x]); } public function upper($x) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('UPPER', [$x]); } public function length($x) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('LENGTH', [$x]); } public function literal($literal) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Literal($this->_quoteLiteral($literal)); } private function _quoteLiteral($literal) { if (\is_numeric($literal) && !\is_string($literal)) { return (string) $literal; } else { if (\is_bool($literal)) { return $literal ? "true" : "false"; } } return "'" . \str_replace("'", "''", $literal) . "'"; } public function between($val, $x, $y) { return $val . ' BETWEEN ' . $x . ' AND ' . $y; } public function trim($x) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Func('TRIM', $x); } public function isMemberOf($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison($x, 'MEMBER OF', $y); } public function isInstanceOf($x, $y) { return new \MailPoetVendor\Doctrine\ORM\Query\Expr\Comparison($x, 'INSTANCE OF', $y); } } 