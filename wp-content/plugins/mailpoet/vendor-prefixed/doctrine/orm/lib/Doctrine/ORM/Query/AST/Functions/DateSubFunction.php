<?php
 namespace MailPoetVendor\Doctrine\ORM\Query\AST\Functions; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\Query\SqlWalker; use MailPoetVendor\Doctrine\ORM\Query\QueryException; class DateSubFunction extends \MailPoetVendor\Doctrine\ORM\Query\AST\Functions\DateAddFunction { public function getSql(\MailPoetVendor\Doctrine\ORM\Query\SqlWalker $sqlWalker) { switch (\strtolower($this->unit->value)) { case 'second': return $sqlWalker->getConnection()->getDatabasePlatform()->getDateSubSecondsExpression($this->firstDateExpression->dispatch($sqlWalker), $this->intervalExpression->dispatch($sqlWalker)); case 'minute': return $sqlWalker->getConnection()->getDatabasePlatform()->getDateSubMinutesExpression($this->firstDateExpression->dispatch($sqlWalker), $this->intervalExpression->dispatch($sqlWalker)); case 'hour': return $sqlWalker->getConnection()->getDatabasePlatform()->getDateSubHourExpression($this->firstDateExpression->dispatch($sqlWalker), $this->intervalExpression->dispatch($sqlWalker)); case 'day': return $sqlWalker->getConnection()->getDatabasePlatform()->getDateSubDaysExpression($this->firstDateExpression->dispatch($sqlWalker), $this->intervalExpression->dispatch($sqlWalker)); case 'week': return $sqlWalker->getConnection()->getDatabasePlatform()->getDateSubWeeksExpression($this->firstDateExpression->dispatch($sqlWalker), $this->intervalExpression->dispatch($sqlWalker)); case 'month': return $sqlWalker->getConnection()->getDatabasePlatform()->getDateSubMonthExpression($this->firstDateExpression->dispatch($sqlWalker), $this->intervalExpression->dispatch($sqlWalker)); case 'year': return $sqlWalker->getConnection()->getDatabasePlatform()->getDateSubYearsExpression($this->firstDateExpression->dispatch($sqlWalker), $this->intervalExpression->dispatch($sqlWalker)); default: throw \MailPoetVendor\Doctrine\ORM\Query\QueryException::semanticalError('DATE_SUB() only supports units of type second, minute, hour, day, week, month and year.'); } } } 