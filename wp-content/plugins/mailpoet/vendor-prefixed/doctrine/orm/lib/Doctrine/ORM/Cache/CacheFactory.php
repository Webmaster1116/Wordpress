<?php
 namespace MailPoetVendor\Doctrine\ORM\Cache; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\Mapping\ClassMetadata; use MailPoetVendor\Doctrine\ORM\EntityManagerInterface; use MailPoetVendor\Doctrine\ORM\Persisters\Collection\CollectionPersister; use MailPoetVendor\Doctrine\ORM\Persisters\Entity\EntityPersister; interface CacheFactory { public function buildCachedEntityPersister(\MailPoetVendor\Doctrine\ORM\EntityManagerInterface $em, \MailPoetVendor\Doctrine\ORM\Persisters\Entity\EntityPersister $persister, \MailPoetVendor\Doctrine\ORM\Mapping\ClassMetadata $metadata); public function buildCachedCollectionPersister(\MailPoetVendor\Doctrine\ORM\EntityManagerInterface $em, \MailPoetVendor\Doctrine\ORM\Persisters\Collection\CollectionPersister $persister, array $mapping); public function buildQueryCache(\MailPoetVendor\Doctrine\ORM\EntityManagerInterface $em, $regionName = null); public function buildEntityHydrator(\MailPoetVendor\Doctrine\ORM\EntityManagerInterface $em, \MailPoetVendor\Doctrine\ORM\Mapping\ClassMetadata $metadata); public function buildCollectionHydrator(\MailPoetVendor\Doctrine\ORM\EntityManagerInterface $em, array $mapping); public function getRegion(array $cache); public function getTimestampRegion(); public function createCache(\MailPoetVendor\Doctrine\ORM\EntityManagerInterface $entityManager); } 