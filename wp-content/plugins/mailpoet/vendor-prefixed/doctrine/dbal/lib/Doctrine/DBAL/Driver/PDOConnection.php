<?php
 namespace MailPoetVendor\Doctrine\DBAL\Driver; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\DBAL\ParameterType; use PDO; use function count; use function func_get_args; class PDOConnection extends \PDO implements \MailPoetVendor\Doctrine\DBAL\Driver\Connection, \MailPoetVendor\Doctrine\DBAL\Driver\ServerInfoAwareConnection { public function __construct($dsn, $user = null, $password = null, ?array $options = null) { try { parent::__construct($dsn, $user, $password, $options); $this->setAttribute(\PDO::ATTR_STATEMENT_CLASS, [\MailPoetVendor\Doctrine\DBAL\Driver\PDOStatement::class, []]); $this->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION); } catch (\PDOException $exception) { throw new \MailPoetVendor\Doctrine\DBAL\Driver\PDOException($exception); } } public function exec($statement) { try { return parent::exec($statement); } catch (\PDOException $exception) { throw new \MailPoetVendor\Doctrine\DBAL\Driver\PDOException($exception); } } public function getServerVersion() { return \PDO::getAttribute(\PDO::ATTR_SERVER_VERSION); } public function prepare($prepareString, $driverOptions = []) { try { return parent::prepare($prepareString, $driverOptions); } catch (\PDOException $exception) { throw new \MailPoetVendor\Doctrine\DBAL\Driver\PDOException($exception); } } public function query() { $args = \func_get_args(); $argsCount = \count($args); try { if ($argsCount === 4) { return parent::query($args[0], $args[1], $args[2], $args[3]); } if ($argsCount === 3) { return parent::query($args[0], $args[1], $args[2]); } if ($argsCount === 2) { return parent::query($args[0], $args[1]); } return parent::query($args[0]); } catch (\PDOException $exception) { throw new \MailPoetVendor\Doctrine\DBAL\Driver\PDOException($exception); } } public function quote($input, $type = \MailPoetVendor\Doctrine\DBAL\ParameterType::STRING) { return parent::quote($input, $type); } public function lastInsertId($name = null) { try { return parent::lastInsertId($name); } catch (\PDOException $exception) { throw new \MailPoetVendor\Doctrine\DBAL\Driver\PDOException($exception); } } public function requiresQueryForServerVersion() { return \false; } } 