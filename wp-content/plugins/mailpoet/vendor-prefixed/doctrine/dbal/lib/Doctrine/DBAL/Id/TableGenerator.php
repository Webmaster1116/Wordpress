<?php
 namespace MailPoetVendor\Doctrine\DBAL\Id; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\DBAL\Connection; use MailPoetVendor\Doctrine\DBAL\DBALException; use MailPoetVendor\Doctrine\DBAL\DriverManager; use MailPoetVendor\Doctrine\DBAL\FetchMode; use MailPoetVendor\Doctrine\DBAL\LockMode; use Throwable; use const CASE_LOWER; use function array_change_key_case; class TableGenerator { private $conn; private $generatorTableName; private $sequences = []; public function __construct(\MailPoetVendor\Doctrine\DBAL\Connection $conn, $generatorTableName = 'sequences') { $params = $conn->getParams(); if ($params['driver'] === 'pdo_sqlite') { throw new \MailPoetVendor\Doctrine\DBAL\DBALException('Cannot use TableGenerator with SQLite.'); } $this->conn = \MailPoetVendor\Doctrine\DBAL\DriverManager::getConnection($params, $conn->getConfiguration(), $conn->getEventManager()); $this->generatorTableName = $generatorTableName; } public function nextValue($sequenceName) { if (isset($this->sequences[$sequenceName])) { $value = $this->sequences[$sequenceName]['value']; $this->sequences[$sequenceName]['value']++; if ($this->sequences[$sequenceName]['value'] >= $this->sequences[$sequenceName]['max']) { unset($this->sequences[$sequenceName]); } return $value; } $this->conn->beginTransaction(); try { $platform = $this->conn->getDatabasePlatform(); $sql = 'SELECT sequence_value, sequence_increment_by' . ' FROM ' . $platform->appendLockHint($this->generatorTableName, \MailPoetVendor\Doctrine\DBAL\LockMode::PESSIMISTIC_WRITE) . ' WHERE sequence_name = ? ' . $platform->getWriteLockSQL(); $stmt = $this->conn->executeQuery($sql, [$sequenceName]); $row = $stmt->fetch(\MailPoetVendor\Doctrine\DBAL\FetchMode::ASSOCIATIVE); if ($row !== \false) { $row = \array_change_key_case($row, \CASE_LOWER); $value = $row['sequence_value']; $value++; if ($row['sequence_increment_by'] > 1) { $this->sequences[$sequenceName] = ['value' => $value, 'max' => $row['sequence_value'] + $row['sequence_increment_by']]; } $sql = 'UPDATE ' . $this->generatorTableName . ' ' . 'SET sequence_value = sequence_value + sequence_increment_by ' . 'WHERE sequence_name = ? AND sequence_value = ?'; $rows = $this->conn->executeUpdate($sql, [$sequenceName, $row['sequence_value']]); if ($rows !== 1) { throw new \MailPoetVendor\Doctrine\DBAL\DBALException('Race-condition detected while updating sequence. Aborting generation'); } } else { $this->conn->insert($this->generatorTableName, ['sequence_name' => $sequenceName, 'sequence_value' => 1, 'sequence_increment_by' => 1]); $value = 1; } $this->conn->commit(); } catch (\Throwable $e) { $this->conn->rollBack(); throw new \MailPoetVendor\Doctrine\DBAL\DBALException('Error occurred while generating ID with TableGenerator, aborted generation: ' . $e->getMessage(), 0, $e); } return $value; } } 