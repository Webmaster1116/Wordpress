<?php
 namespace MailPoetVendor\Doctrine\DBAL\Id; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\DBAL\Schema\Column; use MailPoetVendor\Doctrine\DBAL\Schema\ForeignKeyConstraint; use MailPoetVendor\Doctrine\DBAL\Schema\Index; use MailPoetVendor\Doctrine\DBAL\Schema\Schema; use MailPoetVendor\Doctrine\DBAL\Schema\Sequence; use MailPoetVendor\Doctrine\DBAL\Schema\Table; use MailPoetVendor\Doctrine\DBAL\Schema\Visitor\Visitor; class TableGeneratorSchemaVisitor implements \MailPoetVendor\Doctrine\DBAL\Schema\Visitor\Visitor { private $generatorTableName; public function __construct($generatorTableName = 'sequences') { $this->generatorTableName = $generatorTableName; } public function acceptSchema(\MailPoetVendor\Doctrine\DBAL\Schema\Schema $schema) { $table = $schema->createTable($this->generatorTableName); $table->addColumn('sequence_name', 'string'); $table->addColumn('sequence_value', 'integer', ['default' => 1]); $table->addColumn('sequence_increment_by', 'integer', ['default' => 1]); } public function acceptTable(\MailPoetVendor\Doctrine\DBAL\Schema\Table $table) { } public function acceptColumn(\MailPoetVendor\Doctrine\DBAL\Schema\Table $table, \MailPoetVendor\Doctrine\DBAL\Schema\Column $column) { } public function acceptForeignKey(\MailPoetVendor\Doctrine\DBAL\Schema\Table $localTable, \MailPoetVendor\Doctrine\DBAL\Schema\ForeignKeyConstraint $fkConstraint) { } public function acceptIndex(\MailPoetVendor\Doctrine\DBAL\Schema\Table $table, \MailPoetVendor\Doctrine\DBAL\Schema\Index $index) { } public function acceptSequence(\MailPoetVendor\Doctrine\DBAL\Schema\Sequence $sequence) { } } 