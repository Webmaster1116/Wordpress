<?php
 namespace MailPoetVendor\Doctrine\DBAL\Types; if (!defined('ABSPATH')) exit; use DateTimeImmutable; use MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform; use function date_create_immutable; class VarDateTimeImmutableType extends \MailPoetVendor\Doctrine\DBAL\Types\VarDateTimeType { public function getName() { return \MailPoetVendor\Doctrine\DBAL\Types\Type::DATETIME_IMMUTABLE; } public function convertToDatabaseValue($value, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { if ($value === null) { return $value; } if ($value instanceof \DateTimeImmutable) { return $value->format($platform->getDateTimeFormatString()); } throw \MailPoetVendor\Doctrine\DBAL\Types\ConversionException::conversionFailedInvalidType($value, $this->getName(), ['null', \DateTimeImmutable::class]); } public function convertToPHPValue($value, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { if ($value === null || $value instanceof \DateTimeImmutable) { return $value; } $dateTime = \date_create_immutable($value); if (!$dateTime) { throw \MailPoetVendor\Doctrine\DBAL\Types\ConversionException::conversionFailed($value, $this->getName()); } return $dateTime; } public function requiresSQLCommentHint(\MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { return \true; } } 