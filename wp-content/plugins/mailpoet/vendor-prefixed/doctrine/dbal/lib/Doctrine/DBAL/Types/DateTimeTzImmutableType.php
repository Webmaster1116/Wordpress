<?php
 namespace MailPoetVendor\Doctrine\DBAL\Types; if (!defined('ABSPATH')) exit; use DateTimeImmutable; use MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform; class DateTimeTzImmutableType extends \MailPoetVendor\Doctrine\DBAL\Types\DateTimeTzType { public function getName() { return \MailPoetVendor\Doctrine\DBAL\Types\Type::DATETIMETZ_IMMUTABLE; } public function convertToDatabaseValue($value, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { if ($value === null) { return $value; } if ($value instanceof \DateTimeImmutable) { return $value->format($platform->getDateTimeTzFormatString()); } throw \MailPoetVendor\Doctrine\DBAL\Types\ConversionException::conversionFailedInvalidType($value, $this->getName(), ['null', \DateTimeImmutable::class]); } public function convertToPHPValue($value, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { if ($value === null || $value instanceof \DateTimeImmutable) { return $value; } $dateTime = \DateTimeImmutable::createFromFormat($platform->getDateTimeTzFormatString(), $value); if (!$dateTime) { throw \MailPoetVendor\Doctrine\DBAL\Types\ConversionException::conversionFailedFormat($value, $this->getName(), $platform->getDateTimeTzFormatString()); } return $dateTime; } public function requiresSQLCommentHint(\MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { return \true; } } 