<?php
 namespace MailPoetVendor; if (!defined('ABSPATH')) exit; class Swift_Events_SimpleEventDispatcher implements \MailPoetVendor\Swift_Events_EventDispatcher { private $eventMap = []; private $listeners = []; private $bubbleQueue = []; public function __construct() { $this->eventMap = ['Swift_Events_CommandEvent' => 'MailPoetVendor\\Swift_Events_CommandListener', 'Swift_Events_ResponseEvent' => 'MailPoetVendor\\Swift_Events_ResponseListener', 'Swift_Events_SendEvent' => 'MailPoetVendor\\Swift_Events_SendListener', 'Swift_Events_TransportChangeEvent' => 'MailPoetVendor\\Swift_Events_TransportChangeListener', 'Swift_Events_TransportExceptionEvent' => 'MailPoetVendor\\Swift_Events_TransportExceptionListener']; } public function createSendEvent(\MailPoetVendor\Swift_Transport $source, \MailPoetVendor\Swift_Mime_SimpleMessage $message) { return new \MailPoetVendor\Swift_Events_SendEvent($source, $message); } public function createCommandEvent(\MailPoetVendor\Swift_Transport $source, $command, $successCodes = []) { return new \MailPoetVendor\Swift_Events_CommandEvent($source, $command, $successCodes); } public function createResponseEvent(\MailPoetVendor\Swift_Transport $source, $response, $valid) { return new \MailPoetVendor\Swift_Events_ResponseEvent($source, $response, $valid); } public function createTransportChangeEvent(\MailPoetVendor\Swift_Transport $source) { return new \MailPoetVendor\Swift_Events_TransportChangeEvent($source); } public function createTransportExceptionEvent(\MailPoetVendor\Swift_Transport $source, \MailPoetVendor\Swift_TransportException $ex) { return new \MailPoetVendor\Swift_Events_TransportExceptionEvent($source, $ex); } public function bindEventListener(\MailPoetVendor\Swift_Events_EventListener $listener) { foreach ($this->listeners as $l) { if ($l === $listener) { return; } } $this->listeners[] = $listener; } public function dispatchEvent(\MailPoetVendor\Swift_Events_EventObject $evt, $target) { $this->prepareBubbleQueue($evt); $this->bubble($evt, $target); } private function prepareBubbleQueue(\MailPoetVendor\Swift_Events_EventObject $evt) { $this->bubbleQueue = []; $evtClass = \get_class($evt); foreach ($this->listeners as $listener) { if (\array_key_exists($evtClass, $this->eventMap) && $listener instanceof $this->eventMap[$evtClass]) { $this->bubbleQueue[] = $listener; } } } private function bubble(\MailPoetVendor\Swift_Events_EventObject $evt, $target) { if (!$evt->bubbleCancelled() && ($listener = \array_shift($this->bubbleQueue))) { $listener->{$target}($evt); $this->bubble($evt, $target); } } } 