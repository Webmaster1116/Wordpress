<?php
 namespace MailPoetVendor\Twig\TokenParser; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Node\EmbedNode; use MailPoetVendor\Twig\Node\Expression\ConstantExpression; use MailPoetVendor\Twig\Node\Expression\NameExpression; use MailPoetVendor\Twig\Token; final class EmbedTokenParser extends \MailPoetVendor\Twig\TokenParser\IncludeTokenParser { public function parse(\MailPoetVendor\Twig\Token $token) { $stream = $this->parser->getStream(); $parent = $this->parser->getExpressionParser()->parseExpression(); list($variables, $only, $ignoreMissing) = $this->parseArguments(); $parentToken = $fakeParentToken = new \MailPoetVendor\Twig\Token( 7, '__parent__', $token->getLine() ); if ($parent instanceof \MailPoetVendor\Twig\Node\Expression\ConstantExpression) { $parentToken = new \MailPoetVendor\Twig\Token( 7, $parent->getAttribute('value'), $token->getLine() ); } elseif ($parent instanceof \MailPoetVendor\Twig\Node\Expression\NameExpression) { $parentToken = new \MailPoetVendor\Twig\Token( 5, $parent->getAttribute('name'), $token->getLine() ); } $stream->injectTokens([new \MailPoetVendor\Twig\Token( 1, '', $token->getLine() ), new \MailPoetVendor\Twig\Token( 5, 'extends', $token->getLine() ), $parentToken, new \MailPoetVendor\Twig\Token( 3, '', $token->getLine() )]); $module = $this->parser->parse($stream, [$this, 'decideBlockEnd'], \true); if ($fakeParentToken === $parentToken) { $module->setNode('parent', $parent); } $this->parser->embedTemplate($module); $stream->expect( 3 ); return new \MailPoetVendor\Twig\Node\EmbedNode($module->getTemplateName(), $module->getAttribute('index'), $variables, $only, $ignoreMissing, $token->getLine(), $this->getTag()); } public function decideBlockEnd(\MailPoetVendor\Twig\Token $token) { return $token->test('endembed'); } public function getTag() { return 'embed'; } } \class_alias('MailPoetVendor\\Twig\\TokenParser\\EmbedTokenParser', 'MailPoetVendor\\Twig_TokenParser_Embed'); 