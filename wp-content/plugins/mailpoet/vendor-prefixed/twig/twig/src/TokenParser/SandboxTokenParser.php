<?php
 namespace MailPoetVendor\Twig\TokenParser; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Error\SyntaxError; use MailPoetVendor\Twig\Node\IncludeNode; use MailPoetVendor\Twig\Node\SandboxNode; use MailPoetVendor\Twig\Node\TextNode; use MailPoetVendor\Twig\Token; final class SandboxTokenParser extends \MailPoetVendor\Twig\TokenParser\AbstractTokenParser { public function parse(\MailPoetVendor\Twig\Token $token) { $stream = $this->parser->getStream(); $stream->expect( 3 ); $body = $this->parser->subparse([$this, 'decideBlockEnd'], \true); $stream->expect( 3 ); if (!$body instanceof \MailPoetVendor\Twig\Node\IncludeNode) { foreach ($body as $node) { if ($node instanceof \MailPoetVendor\Twig\Node\TextNode && \ctype_space($node->getAttribute('data'))) { continue; } if (!$node instanceof \MailPoetVendor\Twig\Node\IncludeNode) { throw new \MailPoetVendor\Twig\Error\SyntaxError('Only "include" tags are allowed within a "sandbox" section.', $node->getTemplateLine(), $stream->getSourceContext()); } } } return new \MailPoetVendor\Twig\Node\SandboxNode($body, $token->getLine(), $this->getTag()); } public function decideBlockEnd(\MailPoetVendor\Twig\Token $token) { return $token->test('endsandbox'); } public function getTag() { return 'sandbox'; } } \class_alias('MailPoetVendor\\Twig\\TokenParser\\SandboxTokenParser', 'MailPoetVendor\\Twig_TokenParser_Sandbox'); 