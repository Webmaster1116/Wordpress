<?php
 namespace MailPoetVendor\Twig\TokenParser; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Error\SyntaxError; use MailPoetVendor\Twig\Node\AutoEscapeNode; use MailPoetVendor\Twig\Node\Expression\ConstantExpression; use MailPoetVendor\Twig\Token; final class AutoEscapeTokenParser extends \MailPoetVendor\Twig\TokenParser\AbstractTokenParser { public function parse(\MailPoetVendor\Twig\Token $token) { $lineno = $token->getLine(); $stream = $this->parser->getStream(); if ($stream->test( 3 )) { $value = 'html'; } else { $expr = $this->parser->getExpressionParser()->parseExpression(); if (!$expr instanceof \MailPoetVendor\Twig\Node\Expression\ConstantExpression) { throw new \MailPoetVendor\Twig\Error\SyntaxError('An escaping strategy must be a string or false.', $stream->getCurrent()->getLine(), $stream->getSourceContext()); } $value = $expr->getAttribute('value'); } $stream->expect( 3 ); $body = $this->parser->subparse([$this, 'decideBlockEnd'], \true); $stream->expect( 3 ); return new \MailPoetVendor\Twig\Node\AutoEscapeNode($value, $body, $lineno, $this->getTag()); } public function decideBlockEnd(\MailPoetVendor\Twig\Token $token) { return $token->test('endautoescape'); } public function getTag() { return 'autoescape'; } } \class_alias('MailPoetVendor\\Twig\\TokenParser\\AutoEscapeTokenParser', 'MailPoetVendor\\Twig_TokenParser_AutoEscape'); 