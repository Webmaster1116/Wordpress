<?php
 namespace MailPoetVendor\Twig\NodeVisitor; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Environment; use MailPoetVendor\Twig\Node\Expression\AssignNameExpression; use MailPoetVendor\Twig\Node\Expression\ConstantExpression; use MailPoetVendor\Twig\Node\Expression\GetAttrExpression; use MailPoetVendor\Twig\Node\Expression\MethodCallExpression; use MailPoetVendor\Twig\Node\Expression\NameExpression; use MailPoetVendor\Twig\Node\ImportNode; use MailPoetVendor\Twig\Node\ModuleNode; use MailPoetVendor\Twig\Node\Node; final class MacroAutoImportNodeVisitor implements \MailPoetVendor\Twig\NodeVisitor\NodeVisitorInterface { private $inAModule = \false; private $hasMacroCalls = \false; public function enterNode(\MailPoetVendor\Twig\Node\Node $node, \MailPoetVendor\Twig\Environment $env) { if ($node instanceof \MailPoetVendor\Twig\Node\ModuleNode) { $this->inAModule = \true; $this->hasMacroCalls = \false; } return $node; } public function leaveNode(\MailPoetVendor\Twig\Node\Node $node, \MailPoetVendor\Twig\Environment $env) { if ($node instanceof \MailPoetVendor\Twig\Node\ModuleNode) { $this->inAModule = \false; if ($this->hasMacroCalls) { $node->getNode('constructor_end')->setNode('_auto_macro_import', new \MailPoetVendor\Twig\Node\ImportNode(new \MailPoetVendor\Twig\Node\Expression\NameExpression('_self', 0), new \MailPoetVendor\Twig\Node\Expression\AssignNameExpression('_self', 0), 0, 'import', \true)); } } elseif ($this->inAModule) { if ($node instanceof \MailPoetVendor\Twig\Node\Expression\GetAttrExpression && $node->getNode('node') instanceof \MailPoetVendor\Twig\Node\Expression\NameExpression && '_self' === $node->getNode('node')->getAttribute('name') && $node->getNode('attribute') instanceof \MailPoetVendor\Twig\Node\Expression\ConstantExpression) { $this->hasMacroCalls = \true; $name = $node->getNode('attribute')->getAttribute('value'); $node = new \MailPoetVendor\Twig\Node\Expression\MethodCallExpression($node->getNode('node'), 'macro_' . $name, $node->getNode('arguments'), $node->getTemplateLine()); $node->setAttribute('safe', \true); } } return $node; } public function getPriority() { return -10; } } 