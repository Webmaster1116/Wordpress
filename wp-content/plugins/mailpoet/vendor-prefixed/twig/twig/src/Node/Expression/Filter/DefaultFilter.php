<?php
 namespace MailPoetVendor\Twig\Node\Expression\Filter; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Compiler; use MailPoetVendor\Twig\Node\Expression\ConditionalExpression; use MailPoetVendor\Twig\Node\Expression\ConstantExpression; use MailPoetVendor\Twig\Node\Expression\FilterExpression; use MailPoetVendor\Twig\Node\Expression\GetAttrExpression; use MailPoetVendor\Twig\Node\Expression\NameExpression; use MailPoetVendor\Twig\Node\Expression\Test\DefinedTest; use MailPoetVendor\Twig\Node\Node; class DefaultFilter extends \MailPoetVendor\Twig\Node\Expression\FilterExpression { public function __construct(\MailPoetVendor\Twig\Node\Node $node, \MailPoetVendor\Twig\Node\Expression\ConstantExpression $filterName, \MailPoetVendor\Twig\Node\Node $arguments, int $lineno, string $tag = null) { $default = new \MailPoetVendor\Twig\Node\Expression\FilterExpression($node, new \MailPoetVendor\Twig\Node\Expression\ConstantExpression('default', $node->getTemplateLine()), $arguments, $node->getTemplateLine()); if ('default' === $filterName->getAttribute('value') && ($node instanceof \MailPoetVendor\Twig\Node\Expression\NameExpression || $node instanceof \MailPoetVendor\Twig\Node\Expression\GetAttrExpression)) { $test = new \MailPoetVendor\Twig\Node\Expression\Test\DefinedTest(clone $node, 'defined', new \MailPoetVendor\Twig\Node\Node(), $node->getTemplateLine()); $false = \count($arguments) ? $arguments->getNode(0) : new \MailPoetVendor\Twig\Node\Expression\ConstantExpression('', $node->getTemplateLine()); $node = new \MailPoetVendor\Twig\Node\Expression\ConditionalExpression($test, $default, $false, $node->getTemplateLine()); } else { $node = $default; } parent::__construct($node, $filterName, $arguments, $lineno, $tag); } public function compile(\MailPoetVendor\Twig\Compiler $compiler) { $compiler->subcompile($this->getNode('node')); } } \class_alias('MailPoetVendor\\Twig\\Node\\Expression\\Filter\\DefaultFilter', 'MailPoetVendor\\Twig_Node_Expression_Filter_Default'); 