<?php
 namespace MailPoetVendor\Twig\Node\Expression\Test; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Compiler; use MailPoetVendor\Twig\Error\SyntaxError; use MailPoetVendor\Twig\Node\Expression\ArrayExpression; use MailPoetVendor\Twig\Node\Expression\BlockReferenceExpression; use MailPoetVendor\Twig\Node\Expression\ConstantExpression; use MailPoetVendor\Twig\Node\Expression\FunctionExpression; use MailPoetVendor\Twig\Node\Expression\GetAttrExpression; use MailPoetVendor\Twig\Node\Expression\MethodCallExpression; use MailPoetVendor\Twig\Node\Expression\NameExpression; use MailPoetVendor\Twig\Node\Expression\TestExpression; use MailPoetVendor\Twig\Node\Node; class DefinedTest extends \MailPoetVendor\Twig\Node\Expression\TestExpression { public function __construct(\MailPoetVendor\Twig\Node\Node $node, string $name, ?\MailPoetVendor\Twig\Node\Node $arguments, int $lineno) { if ($node instanceof \MailPoetVendor\Twig\Node\Expression\NameExpression) { $node->setAttribute('is_defined_test', \true); } elseif ($node instanceof \MailPoetVendor\Twig\Node\Expression\GetAttrExpression) { $node->setAttribute('is_defined_test', \true); $this->changeIgnoreStrictCheck($node); } elseif ($node instanceof \MailPoetVendor\Twig\Node\Expression\BlockReferenceExpression) { $node->setAttribute('is_defined_test', \true); } elseif ($node instanceof \MailPoetVendor\Twig\Node\Expression\FunctionExpression && 'constant' === $node->getAttribute('name')) { $node->setAttribute('is_defined_test', \true); } elseif ($node instanceof \MailPoetVendor\Twig\Node\Expression\ConstantExpression || $node instanceof \MailPoetVendor\Twig\Node\Expression\ArrayExpression) { $node = new \MailPoetVendor\Twig\Node\Expression\ConstantExpression(\true, $node->getTemplateLine()); } elseif ($node instanceof \MailPoetVendor\Twig\Node\Expression\MethodCallExpression) { $node->setAttribute('is_defined_test', \true); } else { throw new \MailPoetVendor\Twig\Error\SyntaxError('The "defined" test only works with simple variables.', $lineno); } parent::__construct($node, $name, $arguments, $lineno); } private function changeIgnoreStrictCheck(\MailPoetVendor\Twig\Node\Expression\GetAttrExpression $node) { $node->setAttribute('optimizable', \false); $node->setAttribute('ignore_strict_check', \true); if ($node->getNode('node') instanceof \MailPoetVendor\Twig\Node\Expression\GetAttrExpression) { $this->changeIgnoreStrictCheck($node->getNode('node')); } } public function compile(\MailPoetVendor\Twig\Compiler $compiler) { $compiler->subcompile($this->getNode('node')); } } \class_alias('MailPoetVendor\\Twig\\Node\\Expression\\Test\\DefinedTest', 'MailPoetVendor\\Twig_Node_Expression_Test_Defined'); 