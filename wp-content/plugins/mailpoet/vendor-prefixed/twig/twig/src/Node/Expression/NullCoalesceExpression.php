<?php
 namespace MailPoetVendor\Twig\Node\Expression; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Compiler; use MailPoetVendor\Twig\Node\Expression\Binary\AndBinary; use MailPoetVendor\Twig\Node\Expression\Test\DefinedTest; use MailPoetVendor\Twig\Node\Expression\Test\NullTest; use MailPoetVendor\Twig\Node\Expression\Unary\NotUnary; use MailPoetVendor\Twig\Node\Node; class NullCoalesceExpression extends \MailPoetVendor\Twig\Node\Expression\ConditionalExpression { public function __construct(\MailPoetVendor\Twig\Node\Node $left, \MailPoetVendor\Twig\Node\Node $right, int $lineno) { $test = new \MailPoetVendor\Twig\Node\Expression\Test\DefinedTest(clone $left, 'defined', new \MailPoetVendor\Twig\Node\Node(), $left->getTemplateLine()); if (!$left instanceof \MailPoetVendor\Twig\Node\Expression\BlockReferenceExpression) { $test = new \MailPoetVendor\Twig\Node\Expression\Binary\AndBinary($test, new \MailPoetVendor\Twig\Node\Expression\Unary\NotUnary(new \MailPoetVendor\Twig\Node\Expression\Test\NullTest($left, 'null', new \MailPoetVendor\Twig\Node\Node(), $left->getTemplateLine()), $left->getTemplateLine()), $left->getTemplateLine()); } parent::__construct($test, $left, $right, $lineno); } public function compile(\MailPoetVendor\Twig\Compiler $compiler) { if ($this->getNode('expr2') instanceof \MailPoetVendor\Twig\Node\Expression\NameExpression) { $this->getNode('expr2')->setAttribute('always_defined', \true); $compiler->raw('((')->subcompile($this->getNode('expr2'))->raw(') ?? (')->subcompile($this->getNode('expr3'))->raw('))'); } else { parent::compile($compiler); } } } \class_alias('MailPoetVendor\\Twig\\Node\\Expression\\NullCoalesceExpression', 'MailPoetVendor\\Twig_Node_Expression_NullCoalesce'); 